// Copyright CERN.
//
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package automount

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	goexec "os/exec"
	"os/signal"
	"syscall"

	"github.com/cvmfs-contrib/cvmfs-csi/internal/exec"
	"github.com/cvmfs-contrib/cvmfs-csi/internal/log"
)

const (
	AutofsCvmfsRoot = "/cvmfs"
	AlienCachePath  = "/cvmfs-aliencache"
)

type Opts struct {
	// Number of seconds of idle time after which an autofs-managed CVMFS
	// mount will be unmounted. Zero means never unmount.
	UnmountTimeoutSeconds int

	// HasAlienCache determines whether we're using alien cache.
	// If so, we need to prepare the alien cache volume first (e.g.
	// make sure it has correct permissions).
	HasAlienCache bool
}

func cvmfsVersion() (string, error) {
	out, err := exec.CombinedOutput(goexec.Command("cvmfs2", "--version"))
	if err != nil {
		return "", fmt.Errorf("failed to get CVMFS version: %v", err)
	}

	return string(bytes.TrimSpace(out)), nil
}

func setupCvmfs(o *Opts) error {
	if o.HasAlienCache {
		// Make sure the volume is writable by CVMFS processes.
		if err := os.Chmod(AlienCachePath, 0777); err != nil {
			return err
		}
	}

	// Set up configuration required for autofs with CVMFS to work properly.
	if _, err := exec.CombinedOutput(goexec.Command("cvmfs_config", "setup")); err != nil {
		return fmt.Errorf("failed to setup CVMFS config: %v", err)
	}

	return nil
}

func setupAutofs(o *Opts) error {
	// Generate autofs config file.

	autofsConfFmt :=
		`# Generated by automount-runner for CVMFS CSI
USE_MISC_DEVICE="yes"
TIMEOUT=%d
`

	autofsConf := fmt.Sprintf(autofsConfFmt, o.UnmountTimeoutSeconds)

	if err := os.WriteFile("/etc/sysconfig/autofs", []byte(autofsConf), 0644); err != nil {
		return fmt.Errorf("failed to write autofs configuration to /etc/sysconfig/autofs: %v", err)
	}

	return nil
}

func Init(o *Opts) error {
	ver, err := cvmfsVersion()
	if err != nil {
		return err
	}

	log.Infof("%s", ver)

	if err := setupCvmfs(o); err != nil {
		return err
	}

	if err := setupAutofs(o); err != nil {
		return err
	}

	return nil
}

func RunBlocking() error {
	args := []string{
		"--foreground",
	}

	if log.LevelEnabled(log.LevelDebug) {
		args = append(args, "--verbose")
	}

	if log.LevelEnabled(log.LevelTrace) {
		// automount passes -O options to the underlying fs mounts.
		// Enable CVMFS debug logging.
		args = append(args, "-O", "debug")
	}

	cmd := goexec.Command("automount", args...)

	// Set-up piping output for stdout and stderr to driver's logging.

	outp, err := cmd.StdoutPipe()
	if err != nil {
		return err
	}
	cmd.Stderr = cmd.Stdout

	// Run automount.

	scanner := bufio.NewScanner(outp)
	scanner.Split(bufio.ScanLines)

	go func() {
		for scanner.Scan() {
			log.Infof("automount[%d]: %s", cmd.Process.Pid, scanner.Text())
		}
	}()

	// Catch SIGTERM and SIGKILL and forward it to the automount process.

	sigCh := make(chan os.Signal, 1)
	defer close(sigCh)

	go func() {
		for {
			if sig, more := <-sigCh; more {
				cmd.Process.Signal(sig)
			} else {
				break
			}
		}
	}()

	signal.Notify(sigCh, syscall.SIGTERM, syscall.SIGKILL)

	// Start automount daemon.

	log.Infof("Starting automount daemon prog=%s args=%v", cmd.Path, cmd.Args)
	if err := cmd.Start(); err != nil {
		return err
	}
	log.Infof("Started automount daemon PID %d", cmd.Process.Pid)

	// Wait until automount exits.

	cmd.Wait()

	if cmd.ProcessState.ExitCode() != 0 {
		log.Fatalf(fmt.Sprintf("automount[%d] has exited unexpectedly: %s", cmd.Process.Pid, cmd.ProcessState))
	}

	log.Infof("automount[%d] has exited: %s", cmd.Process.Pid, cmd.ProcessState)

	return nil
}

func IsAutofs(path string) (bool, error) {
	const fsType = 0x187

	statfs := syscall.Statfs_t{}
	err := syscall.Statfs(path, &statfs)
	if err != nil {
		return false, err
	}

	return statfs.Type == fsType, nil
}
